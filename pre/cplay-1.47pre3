#!/usr/bin/env python
# -*- python -*-

__version__ = "cplay 1.47pre3"

"""
cplay - A curses front-end for various audio players
Copyright (C) 1998-2003 Ulf Betlehem <flu@iki.fi>

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
"""

# ------------------------------------------
from types import *

import os
import sys
import time
import getopt
import signal
import string
import select
import re

try: from ncurses import curses
except ImportError: import curses

try: import tty
except ImportError: tty = None

try: import locale; locale.setlocale(locale.LC_ALL, "")
except: pass

# ------------------------------------------
_locale_domain = "cplay"
_locale_dir = "/usr/local/share/locale"

try:
    import gettext # python 2.0
    gettext.install(_locale_domain, _locale_dir)
except ImportError:
    try:
        import fintl
        fintl.bindtextdomain(_locale_domain, _locale_dir)
        fintl.textdomain(_locale_domain)
        _ = fintl.gettext
    except ImportError:
        def _(s): return s
except:
    def _(s): return s

# ------------------------------------------
XTERM = re.search("rxvt|xterm", os.environ["TERM"])
RETRY = 2.0

MIXER_IOCTL = [["MASTER", 0x80044d00, 0xc0044d00],
               ["PCM",    0x80044d04, 0xc0044d04]]

for DSP in ["/dev/sound/dsp", "/dev/dsp"]:
    if os.path.exists(DSP): break
for MIXER in ["/dev/sound/mixer", "/dev/mixer"]:
    if os.path.exists(MIXER): break

CONTROL_FIFO = "/var/tmp/cplay_control"

# ------------------------------------------
def which(program):
    for path in string.split(os.environ["PATH"], ":"):
        if os.path.exists(os.path.join(path, program)):
            return os.path.join(path, program)

# ------------------------------------------
def cut(s, n, left=0):
    if left: return len(s) > n and "<%s" % s[-n+1:] or s
    else: return len(s) > n and "%s>" % s[:n-1] or s

# ------------------------------------------
#def log(msg):
#    open("log", "a").write("%.02f %s\n" % (time.time(), msg))

# ------------------------------------------
class Stack:
    def __init__(self):
        self.items = ()

    def push(self, item):
        self.items = (item,) + self.items

    def pop(self):
        self.items, item = self.items[1:], self.items[0]
        return item

# ------------------------------------------
class KeymapStack(Stack):
    def process(self, code):
        for keymap in self.items:
            if keymap and keymap.process(code):
                break

# ------------------------------------------
class Keymap:
    def __init__(self):
        self.methods = [None] * curses.KEY_MAX

    def bind(self, key, method, args=None):
        if type(key) in (TupleType, ListType):
            for i in key: self.bind(i, method, args)
            return
        if type(key) is StringType:
            key = ord(key)
        self.methods[key] = (method, args)

    def process(self, key):
        if self.methods[key] is None: return 0
        method, args = self.methods[key]
        if args is None:
            apply(method, (key,))
        else:
            apply(method, args)
        return 1

# ------------------------------------------
class Window:

    string.punctuation = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'  # 1.5 kludge
    chars = string.letters+string.digits+string.punctuation+string.whitespace

    t = ['?'] * 256
    for c in chars: t[ord(c)] = c
    translationTable = string.join(t, ""); del t

    def __init__(self, parent):
        self.parent = parent
        self.children = []
        self.name = None
        self.keymap = None
        self.visible = 1
        self.resize()
        if parent: parent.children.append(self)

    def insstr(self, s):
        if not s: return
        self.w.addstr(s[:-1])
        self.w.hline(ord(s[-1]), 1)  # insch() work-around

    def __getattr__(self, name):
        return getattr(self.w, name)

    def getmaxyx(self):
        y, x = self.w.getmaxyx()
        try: curses.version # tested with 1.2 and 1.6
        except AttributeError:
            # pyncurses - emulate traditional (silly) behavior
            y, x = y+1, x+1
        return y, x

    def touchwin(self):
        try: self.w.touchwin()
        except AttributeError: self.touchln(0, self.getmaxyx()[0])

    def attron(self, attr):
        try: self.w.attron(attr)
        except AttributeError: self.w.attr_on(attr)

    def attroff(self, attr):
        try: self.w.attroff(attr)
        except AttributeError: self.w.attr_off(attr)

    def newwin(self):
        return curses.newwin(0, 0, 0, 0)

    def resize(self):
        # todo - delwin?
        self.w = self.newwin()
        self.ypos, self.xpos = self.getbegyx()
        self.rows, self.cols = self.getmaxyx()
        self.keypad(1)
        self.leaveok(0)
        self.scrollok(0)
        for child in self.children:
            child.resize()

    def update(self):
        self.clear()
        self.refresh()
        for child in self.children:
            child.update()

# ------------------------------------------
class ProgressWindow(Window):
    def __init__(self, parent):
        Window.__init__(self, parent)
        self.value = 0

    def newwin(self):
        return curses.newwin(1, self.parent.cols, self.parent.rows-2, 0)

    def update(self):
        self.move(0, 0)
        self.hline(ord('-'), self.cols)
        if self.value > 0:
            self.move(0, 0)
            x = int(self.value * self.cols)  # 0 to cols-1
            x and self.hline(ord('='), x)
            self.move(0, x)
            self.insstr('|')
        self.touchwin()
        self.refresh()

    def progress(self, value):
        self.value = min(value, 0.99)
        self.update()

# ------------------------------------------
class StatusWindow(Window):
    def __init__(self, parent):
        Window.__init__(self, parent)
        self.default_message = ''
        self.current_message = ''
        self.timeout_tag = None

    def newwin(self):
        return curses.newwin(1, self.parent.cols-12, self.parent.rows-1, 0)

    def update(self):
        msg = string.translate(self.current_message, Window.translationTable)
        self.move(0, 0)
        self.clrtoeol()
        self.insstr(cut(msg, self.cols))
        self.touchwin()
        self.refresh()

    def status(self, message, duration = 0):
        self.current_message = str(message)
        if self.timeout_tag: app.timeout.remove(self.timeout_tag)
        if duration: self.timeout_tag = app.timeout.add(duration, self.timeout)
        else: self.timeout_tag = None
        self.update()

    def timeout(self):
        self.timeout_tag = None
        self.restore_default_status()

    def set_default_status(self, message):
        if self.current_message == self.default_message: self.status(message)
        self.default_message = message
        XTERM and sys.stderr.write("\033]0;%s\a" % (message or "cplay"))

    def restore_default_status(self):
        self.status(self.default_message)

# ------------------------------------------
class CounterWindow(Window):
    def __init__(self, parent):
        Window.__init__(self, parent)
        self.values = [0, 0]
        self.mode = 1

    def newwin(self):
        return curses.newwin(1, 11, self.parent.rows-1, self.parent.cols-11)

    def update(self):
        h, s = divmod(self.values[self.mode], 3600)
        m, s = divmod(s, 60)
        self.move(0, 0)
        self.attron(curses.A_BOLD)
        self.insstr("%02dh %02dm %02ds" % (h, m, s))
        self.attroff(curses.A_BOLD)
        self.touchwin()
        self.refresh()

    def counter(self, values):
        self.values = values
        self.update()

    def toggle_mode(self):
        self.mode = not self.mode
        tmp = [_("elapsed"), _("remaining")][self.mode]
        app.status(_("Counting %s time") % tmp, 1)
        self.update()

# ------------------------------------------
class RootWindow(Window):
    def __init__(self, parent):
        Window.__init__(self, parent)
        keymap = Keymap()
        app.keymapstack.push(keymap)
        self.win_progress = ProgressWindow(self)
        self.win_status = StatusWindow(self)
        self.win_counter = CounterWindow(self)
        self.win_tab = TabWindow(self)
        keymap.bind(12, self.update, ()) # C-l
        keymap.bind([curses.KEY_LEFT, 2], app.seek, (-1,)) # C-b
        keymap.bind([curses.KEY_RIGHT, 6], app.seek, (1,)) # C-f
        keymap.bind(range(48,58), app.key_volume) # 1234567890
        keymap.bind(['+', '='], app.inc_volume, ())
        keymap.bind('-', app.dec_volume, ())
        keymap.bind('n', app.next_song, ())
        keymap.bind('p', app.prev_song, ())
        keymap.bind('z', app.toggle_pause, ())
        keymap.bind('x', app.toggle_stop, ())
        keymap.bind('c', self.win_counter.toggle_mode, ())
        keymap.bind('Q', self.command_quit, (1,))
        keymap.bind('q', self.command_quit, ())
        keymap.bind('v', app.toggle_mixer, ())

    def command_quit(self, seriously=0):
        if app.quit_silently or seriously: app.quit()
        app.stop_input_hook = None
        app.do_input_hook = self.do_quit
        app.start_input(_("Quit? (y/N)"))
        
    def do_quit(self, ch=None):
        if chr(ch) == 'y': app.quit()
        app.stop_input()

# ------------------------------------------
class TabWindow(Window):
    def __init__(self, parent):
        Window.__init__(self, parent)
        self.active_child = 0

        self.win_filelist = self.add(FilelistWindow)
        self.win_playlist = self.add(PlaylistWindow)
        self.win_help     = self.add(HelpWindow)

        keymap = Keymap()
        keymap.bind('\t', self.change_window, ()) # Tab
        keymap.bind('h', self.help, ())
        app.keymapstack.push(keymap)
        app.keymapstack.push(self.children[self.active_child].keymap)

    def newwin(self):
        return curses.newwin(self.parent.rows-2, self.parent.cols, 0, 0)

    def update(self):
        self.update_title()
        self.move(1, 0)
        self.hline(ord('-'), self.cols)
        self.move(2, 0)
        self.clrtobot()
        self.refresh()
        child = self.children[self.active_child]
        child.visible = 1
        child.update()

    def update_title(self, refresh = 1):
        child = self.children[self.active_child]
        self.move(0, 0)
        self.clrtoeol()
        self.attron(curses.A_BOLD)
        self.insstr(child.get_title())
        self.attroff(curses.A_BOLD)
        if refresh: self.refresh()

    def add(self, Class):
        win = Class(self)
        win.visible = 0
        return win

    def change_window(self, window = None):
        app.keymapstack.pop()
        self.children[self.active_child].visible = 0
        if window:
            self.active_child = self.children.index(window)
        else:
            # toggle windows 0 and 1
            self.active_child = not self.active_child
        app.keymapstack.push(self.children[self.active_child].keymap)
        self.update()

    def help(self):
        if self.children[self.active_child] == self.win_help:
            self.change_window(self.win_last)
        else:
            self.win_last = self.children[self.active_child]
            self.change_window(self.win_help)
            app.status(__version__, 2)

# ------------------------------------------
class ListWindow(Window):
    def __init__(self, parent):
        Window.__init__(self, parent)
        self.buffer = []
        self.bufptr = self.scrptr = 0
        self.search_direction = 0
        self.keymap = Keymap()
        self.keymap.bind(['k', curses.KEY_UP, 16], self.cursor_move, (-1,))
        self.keymap.bind(['j', curses.KEY_DOWN, 14], self.cursor_move, (1,))
        self.keymap.bind(['K', curses.KEY_PPAGE], self.cursor_ppage, ())
        self.keymap.bind(['J', curses.KEY_NPAGE], self.cursor_npage, ())
        self.keymap.bind(['g', curses.KEY_HOME], self.cursor_home, ())
        self.keymap.bind(['G', curses.KEY_END], self.cursor_end, ())
        self.keymap.bind(['?', 18], self.start_search,
                         (_("backward-isearch"), -1))
        self.keymap.bind(['/', 19], self.start_search,
                         (_("forward-isearch"), 1))

    def newwin(self):
        return curses.newwin(self.parent.rows-2, self.parent.cols,
                             self.parent.ypos+2, self.parent.xpos)

    def update(self, force = 1):
        self.bufptr = max(0, min(self.bufptr, len(self.buffer) - 1))
        scrptr = (self.bufptr / self.rows) * self.rows
        if force or self.scrptr != scrptr:
            self.scrptr = scrptr
            self.move(0, 0)
            self.clrtobot()
            i = 0
            for entry in self.buffer[self.scrptr:]:
                self.move(i, 0)
                i = i + 1
                self.putstr(entry)
                if self.getyx()[0] == self.rows - 1: break
            if self.visible:
                self.refresh()
                self.parent.update_title()
        self.update_line(curses.A_REVERSE)

    def update_line(self, attr = None, refresh = 1):
        if not self.buffer: return
        ypos = self.bufptr - self.scrptr
        if attr: self.attron(attr)
        self.move(ypos, 0)
        self.hline(ord(' '), self.cols)
        self.putstr(self.current())
        if attr: self.attroff(attr)
        if self.visible and refresh: self.refresh()

    def get_title(self, data=""):
        pos = "%s-%s/%s" % (self.scrptr+min(1, len(self.buffer)),
                            min(self.scrptr+self.rows, len(self.buffer)),
                            len(self.buffer))
        width = self.cols-len(pos)-2
        data = cut(data, width-len(self.name), 1)
        return "%-*s  %s" % (width, cut(self.name+data, width), pos)

    def putstr(self, entry, *pos):
        s = string.translate(str(entry), Window.translationTable)
        pos and apply(self.move, pos)
        self.insstr(cut(s, self.cols))

    def current(self):
        if self.bufptr >= len(self.buffer): self.bufptr = len(self.buffer) - 1
        return self.buffer[self.bufptr]

    def cursor_move(self, ydiff):
        if app.input_mode: app.cancel_input()
        if not self.buffer: return
        self.update_line(refresh = 0)
        self.bufptr = (self.bufptr + ydiff) % len(self.buffer)
        self.update(force = 0)

    def cursor_ppage(self):
        tmp = self.bufptr % self.rows
        if tmp == self.bufptr:
            self.cursor_move(-(tmp+(len(self.buffer) % self.rows) or self.rows))
        else:
            self.cursor_move(-(tmp+self.rows))

    def cursor_npage(self):
        tmp = self.rows - self.bufptr % self.rows
        if self.bufptr + tmp > len(self.buffer):
            self.cursor_move(len(self.buffer) - self.bufptr)
        else:
            self.cursor_move(tmp)

    def cursor_home(self): self.cursor_move(-self.bufptr)

    def cursor_end(self): self.cursor_move(-self.bufptr - 1)

    def start_search(self, type, direction):
        self.search_direction = direction
        self.not_found = 0
        if not app.input_mode:
            app.do_input_hook = self.do_search
            app.stop_input_hook = self.stop_search
            app.start_input(type)
        else:
            app.input_prompt = type
            self.do_search(advance = direction)

    def stop_search(self):
        app.status(_("ok"), 1)

    def do_search(self, ch = None, advance = 0):
        if ch in [8, 127]: # backspace
            app.input_string = app.input_string[:-1]
        elif ch:
            app.input_string = "%s%c" % (app.input_string, ch)
        index = self.bufptr + advance
        while 1:
            if not 0 <= index < len(self.buffer):
                app.status(_("Not found: %s ") % app.input_string)
                self.not_found = 1
                break
            line = string.lower(str(self.buffer[index]))
            if string.find(line, string.lower(app.input_string)) != -1:
                app.status("%s: %s " % (app.input_prompt, app.input_string))
                self.update_line(refresh = 0)
                self.bufptr = index
                self.update(force = 0)
                self.not_found = 0
                break
            if self.not_found:
                app.status(_("Not found: %s ") % app.input_string)
                break
            index = index + self.search_direction

# ------------------------------------------
class HelpWindow(ListWindow):

    def __init__(self, parent):
        ListWindow.__init__(self, parent)
        self.name = _("Help")
        self.keymap.bind('q', self.parent.help, ())
        self.buffer = string.split(_("""\

  Global                               Enter : chdir or play
  ------                               Space : tag/untag current
  Up, C-p, k, Down, C-n, j,            t, T  : tag current/regex
  PgUp, K, PgDown, J                   u, U  : untag current/regex
  Home, g, End, G                      
              : movement               Filelist
  Tab         : filelist/playlist      --------
  n, p        : next/prev track        BkSpc : parent dir
  z, x        : toggle pause/stop      o, s  : goto, search recursively
  Left, Right,                         a     : add (tagged) to playlist
  C-b, C-f    : seek backward/forward  
  c           : toggle counter mode    Playlist
  C-s, C-r, / : isearch                --------
  C-g, Esc    : cancel                 d, D  : delete (tagged) tracks/playlist
  1..9, +, -  : volume control         m, M  : move tagged tracks after/before
  v           : PCM or MASTER volume   r, R  : toggle repeat/Random mode
  C-l, l      : refresh, list mode     s, S  : shuffle/Sort playlist
  h, q, Q     : help, quit?, Quit!     w, @  : write playlist, jump to current
  """), "\n")

# ------------------------------------------
class ListEntry:
    def __init__(self, pathname, dir=0):
        self.filename = os.path.basename(pathname)
        self.pathname = pathname
        self.slash = dir and "/" or ""
        self.tagged = 0
        self.active = 0

    def set_tagged(self, value):
        self.tagged = value

    def is_tagged(self):
        return self.tagged == 1

    def set_active(self, value):
        self.active = value

    def is_active(self):
        return self.active == 1

    def __str__(self):
        mark = self.is_tagged() and "#" or " "
        return "%s %s%s" % (mark, self.vp(), self.slash)

    def vp(self):
        return self.vps[0][1](self)

    def vp_filename(self):
        return self.filename or self.vp_pathname()  # todo

    def vp_pathname(self):
        if self.hide_dirs:
            return string.split(self.pathname, "/", self.hide_dirs+1)[-1]
        return self.pathname

    vps = [[_("filename"), vp_filename],
           [_("pathname"), vp_pathname]]
    hide_dirs = 0

# ------------------------------------------
class PlaylistEntry(ListEntry):
    def __init__(self, pathname):
        ListEntry.__init__(self, pathname)
        self.metadata = None

    def vp_metadata(self):
        return self.metadata or self.read_metadata()

    def read_metadata(self):
        self.metadata = get_tag(self.pathname)
        return self.metadata

    vps = ListEntry.vps[:]

# ------------------------------------------
class TagListWindow(ListWindow):
    def __init__(self, parent):
        ListWindow.__init__(self, parent)
        self.keymap.bind(' ', self.command_tag_untag, ())
        self.keymap.bind('t', self.command_tag, (1,))
        self.keymap.bind('u', self.command_tag, (0,))
        self.keymap.bind('T', self.command_tag_regexp, (1,))
        self.keymap.bind('U', self.command_tag_regexp, (0,))
        self.keymap.bind('l', self.command_change_viewpoint, ())
        self.keymap.bind('>', self.command_hide_dirs, (1,))
        self.keymap.bind('<', self.command_hide_dirs, (-1,))

    def command_hide_dirs(self, n):
        ListEntry.hide_dirs = max(0, ListEntry.hide_dirs+n)
        app.status(_("Hiding %s dirs") % ListEntry.hide_dirs, 1)
        self.update()

    def command_change_viewpoint(self, klass=ListEntry):
        klass.vps.append(klass.vps.pop(0))
        app.status(_("Listing %s") % klass.vps[0][0], 1)
        self.update()

    def command_tag_untag(self):
        if not self.buffer: return
        tmp = self.buffer[self.bufptr]
        tmp.set_tagged(not tmp.is_tagged())
        self.cursor_move(1)

    def command_tag(self, value):
        if not self.buffer: return
        self.buffer[self.bufptr].set_tagged(value)
        self.cursor_move(1)

    def command_tag_regexp(self, value):
        self.tag_value = value
        app.do_input_hook = None
        app.stop_input_hook = self.stop_tag_regexp
        app.start_input(value and _("Tag regexp") or _("Untag regexp"))

    def stop_tag_regexp(self):
        try:
            r = re.compile(app.input_string, re.I)
            for entry in self.buffer:
                if r.search(str(entry)):
                    entry.set_tagged(self.tag_value)
            self.update()
            app.status(_("ok"), 1)
        except re.error, e:
            app.status(e, 2)

    def get_tagged(self):
        return filter(lambda x: x.is_tagged(), self.buffer)

# ------------------------------------------
class FilelistWindow(TagListWindow):
    def __init__(self, parent):
        TagListWindow.__init__(self, parent)
        self.oldposition = {}
        try: self.chdir(os.getcwd())
        except OSError: self.chdir(os.environ['HOME'])
        self.mtime_when = 0
        self.mtime = None
        self.keymap.bind('\n', self.command_chdir_or_play, ())
        self.keymap.bind(['.', curses.KEY_BACKSPACE],
                         self.command_chparentdir, ())
        self.keymap.bind('a', self.command_add_recursively, ())
        self.keymap.bind('o', self.command_goto, ())
        self.keymap.bind('s', self.command_search_recursively, ())

    def command_search_recursively(self):
        app.do_input_hook = None
        app.stop_input_hook = self.stop_search_recursively
        app.start_input(_("search"))

    def stop_search_recursively(self):
        try: re_tmp = re.compile(app.input_string, re.I)
        except re.error, e:
            app.status(e, 2)
            return
        app.status(_("Searching..."))
        results = []
        for entry in self.buffer:
            if entry.filename == "..":
                continue
            if re_tmp.search(entry.filename):
                results.append(entry)
            elif os.path.isdir(entry.pathname):
                try: self.search_recursively(re_tmp, entry.pathname, results)
                except: pass
        if not self.search_mode:
            self.chdir(os.path.join(self.cwd,_("search results")))
            self.search_mode = 1
        self.buffer = results
        self.bufptr = 0
        self.parent.update_title()
        self.update()
        app.restore_default_status()

    def search_recursively(self, re_tmp, dir, results):
        for filename in os.listdir(dir):
            pathname = os.path.join(dir, filename)
            if re_tmp.search(filename):
                if os.path.isdir(pathname):
                    results.append(ListEntry(pathname, 1))
                elif VALID_PLAYLIST(filename) or VALID_SONG(filename):
                    results.append(ListEntry(pathname))
            elif os.path.isdir(pathname):
                self.search_recursively(re_tmp, pathname, results)

    def get_title(self):
        self.name = _("Filelist: ")
        return ListWindow.get_title(self, re.sub("/?$", "/", self.cwd))

    def listdir_maybe(self, now=0):
        if now < self.mtime_when+2: return
        self.mtime_when = now
        self.oldposition[self.cwd] = self.bufptr
        try: self.mtime == os.stat(self.cwd)[8] or self.listdir(quiet=1)
        except os.error: pass

    def listdir(self, quiet=0, prevdir=None):
        quiet or app.status(_("Reading directory..."))
        self.search_mode = 0
        dirs = []
        files = []
        try:
            self.mtime = os.stat(self.cwd)[8]
            self.mtime_when = time.time()
            filenames = os.listdir(self.cwd)
            filenames.sort()
            for filename in filenames:
                if filename[0] == ".": continue
                pathname = os.path.join(self.cwd, filename)
                if os.path.isdir(pathname): dirs.append(pathname)
                elif VALID_SONG(filename): files.append(pathname)
                elif VALID_PLAYLIST(filename): files.append(pathname)
        except os.error: pass
        dots = ListEntry(os.path.join(self.cwd, ".."))
        self.buffer = [[dots], []][self.cwd == "/"]
        for i in dirs: self.buffer.append(ListEntry(i, 1))
        for i in files: self.buffer.append(ListEntry(i))
        if prevdir:
            for self.bufptr in range(len(self.buffer)):
                if self.buffer[self.bufptr].filename == prevdir: break
            else: self.bufptr = 0
        elif self.oldposition.has_key(self.cwd):
            self.bufptr = self.oldposition[self.cwd]
        else: self.bufptr = 0
        self.parent.update_title()
        self.update()
        quiet or app.restore_default_status()

    def chdir(self, dir):
        if hasattr(self, "cwd"): self.oldposition[self.cwd] = self.bufptr
        self.cwd = os.path.normpath(dir)

    def command_chdir_or_play(self):
        if not self.buffer: return
        if self.current().filename == "..":
            self.command_chparentdir()
        elif os.path.isdir(self.current().pathname):
            self.chdir(self.current().pathname)
            self.listdir()
        elif VALID_SONG(self.current().filename):
            app.play(self.current().pathname)

    def command_chparentdir(self):
        dir = os.path.basename(self.cwd)
        self.chdir(os.path.dirname(self.cwd))
        self.listdir(prevdir=dir)

    def command_goto(self):
        app.do_input_hook = None
        app.stop_input_hook = self.stop_goto
        app.start_input(_("goto"))

    def stop_goto(self):
        dir = os.path.expanduser(app.input_string)
        if dir[0] != '/': dir = os.path.join(self.cwd, dir)
        if not os.path.isdir(dir):
            app.status(_("Not a directory!"), 1)
            return
        self.chdir(dir)
        self.listdir()

    def command_add_recursively(self):
        l = self.get_tagged()
        if not l:
            app.win_playlist.add(self.current().pathname)
            self.cursor_move(1)
            return
        for entry in l:
            app.win_playlist.add(entry.pathname)
            entry.set_tagged(0)
        self.update()

# ------------------------------------------
class PlaylistWindow(TagListWindow):

    def __init__(self, parent):
        TagListWindow.__init__(self, parent)
        self.pathname = None
        self.repeat = 0
        self.random = 0
        self.random_prev = []
        self.random_next = []
        self.random_unplayed = []
        self.keymap.bind('\n', self.command_play, ())
        self.keymap.bind('d', self.command_delete, ())
        self.keymap.bind('D', self.command_delete_all, ())
        self.keymap.bind('m', self.command_move, (1,))
        self.keymap.bind('M', self.command_move, (0,))
        self.keymap.bind('s', self.command_shuffle, ())
        self.keymap.bind('S', self.command_sort, ())
        self.keymap.bind('r', self.command_toggle_repeat, ())
        self.keymap.bind('R', self.command_toggle_random, ())
        self.keymap.bind('w', self.command_save_playlist, ())
        self.keymap.bind('@', self.command_jump_to_active, ())

    def command_change_viewpoint(self, klass=PlaylistEntry):
        if not globals().get("ID3"):
            try:
                global ID3, ogg, codecs
                import ID3, ogg.vorbis, codecs
                klass.vps.append([_("metadata"), klass.vp_metadata])
            except ImportError: pass
        TagListWindow.command_change_viewpoint(self, klass)

    def get_title(self):
        self.name = _("Playlist %s %s") % (
            self.repeat and _("[repeat]") or " " * len(_("[repeat]")),
            self.random and _("[random]") or " " * len(_("[random]")))
        return ListWindow.get_title(self)

    def append(self, item):
        self.buffer.append(item)
        self.random_unplayed.append(item)

    def remove(self, item):
        self.buffer.remove(item)
        if self.random:
            try: self.random_prev.remove(item)
            except ValueError: pass
            try: self.random_next.remove(item)
            except ValueError: pass
            try: self.random_unplayed.remove(item)
            except ValueError: pass

    def add_dir(self, dir):
        filenames = os.listdir(dir)
        filenames.sort()
        subdirs = []
        for filename in filenames:
            pathname = os.path.join(dir, filename)
            if VALID_SONG(filename):
                self.append(PlaylistEntry(pathname))
            if os.path.isdir(pathname):
                subdirs.append(pathname)
        map(self.add_dir, subdirs)

    def add_m3u(self, line):
        if re.match("^(#.*)?$", line): return
        if re.match("^(/|http://)", line):
            self.append(PlaylistEntry(self.fix_url(line)))
        else:
            dirname = os.path.dirname(self.pathname)
            self.append(PlaylistEntry(os.path.join(dirname, line)))

    def add_pls(self, line):
        # todo: support title & length
        m = re.match("File(\d+)=(.*)", line)
        if not m: return
        self.append(PlaylistEntry(self.fix_url(m.group(2))))

    def add_playlist(self, pathname):
        self.pathname = pathname
        if re.search("\.m3u$", pathname, re.I): f = self.add_m3u
        if re.search("\.pls$", pathname, re.I): f = self.add_pls
        file = open(pathname)
        map(f, map(string.strip, file.readlines()))
        file.close()
    
    def add(self, pathname):
        try:
            if os.path.isdir(pathname):
                app.status(_("Working..."))
                self.add_dir(pathname)
            elif VALID_PLAYLIST(pathname):
                self.add_playlist(pathname)
            else:
                pathname = self.fix_url(pathname)
                self.append(PlaylistEntry(pathname))
            # todo - refactor
            filename = os.path.basename(pathname) or pathname
            app.status(_("Added: %s") % filename, 1)
        except Exception, e:
            app.status(e, 2)

    def fix_url(self, url):
        return re.sub("(http://[^/]+)/?(.*)", "\\1/\\2", url)

    def putstr(self, entry, *pos):
        if entry.is_active(): self.attron(curses.A_BOLD)
        apply(ListWindow.putstr, (self, entry) + pos)
        if entry.is_active(): self.attroff(curses.A_BOLD)

    def next_song(self):
        entry = self.change_active_entry(1)
        return entry and entry.pathname

    def prev_song(self):
        entry = self.change_active_entry(-1)
        return entry and entry.pathname

    def change_active_entry(self, direction):
        if not self.buffer: return
        old = self.get_active_entry()
        new = None
        if self.random:
            if direction > 0:
                if self.random_next: new = self.random_next.pop()
                elif self.random_unplayed: pass
                elif self.repeat: self.random_unplayed = self.buffer[:]
                else: return
                if not new:
                    import whrandom
                    new = whrandom.choice(self.random_unplayed)
                    self.random_unplayed.remove(new)
                try: self.random_prev.remove(new)
                except ValueError: pass
                self.random_prev.append(new)
            else:
                if len(self.random_prev) > 1:
                    self.random_next.append(self.random_prev.pop())
                    new = self.random_prev[-1]
                else: return
            old and old.set_active(0)
        elif old:
            index = self.buffer.index(old)+direction
            if not (0 <= index < len(self.buffer) or self.repeat): return
            old.set_active(0)
            new = self.buffer[index % len(self.buffer)]
        else:
            new = self.buffer[0]
        new.set_active(1)
        self.update()
        return new

    def get_active_entry(self):
        for entry in self.buffer:
            if entry.is_active(): return entry

    def command_jump_to_active(self):
        entry = self.get_active_entry()
        if not entry: return
        self.bufptr = self.buffer.index(entry)
        self.update()

    def command_play(self):
        if not self.buffer: return
        entry = self.get_active_entry()
        entry and entry.set_active(0)
        entry = self.current()
        entry.set_active(1)
        self.update()
        app.play(entry.pathname)

    def command_delete(self):
        if not self.buffer: return
        current_entry = self.current()
        l = self.get_tagged()
        if not l:
            self.remove(current_entry)
        else:
            map(self.remove, l)
            try: self.bufptr = self.buffer.index(current_entry)
            except ValueError: pass
        self.update()

    def command_delete_all(self):
        self.buffer = []
        self.random_prev = []
        self.random_next = []
        self.random_unplayed = []
        app.status(_("Deleted playlist"), 1)
        self.update()

    def command_move(self, after):
        if not self.buffer: return
        current_entry = self.current()
        if current_entry.is_tagged(): return    # sanity check
        l = self.get_tagged()
        if not l: return
        map(self.remove, l)
        self.bufptr = self.buffer.index(current_entry)+after
        self.buffer[self.bufptr:self.bufptr] = l
        self.update()

    def command_shuffle(self):
        import whrandom
        l = []
        n = len(self.buffer)
        while n > 0:
            n = n-1
            r = whrandom.randint(0, n)
            l.append(self.buffer[r])
            del self.buffer[r]
        self.buffer = l
        self.bufptr = 0
        self.update()
        app.status(_("Shuffled playlist... Oops?"), 1)

    def command_sort(self):
        app.status(_("Working..."))
        self.buffer.sort(lambda x, y: x.vp() > y.vp() or -1)
        self.bufptr = 0
        self.update()
        app.status(_("Sorted playlist"), 1)

    def command_toggle_repeat(self):
        self.repeat = not self.repeat
        app.status(_("Repeat %s") % (self.repeat and _("on") or _("off")), 1)
        self.parent.update_title()

    def command_toggle_random(self):
        self.random = not self.random
        if self.random:
            self.random_prev = []
            self.random_next = []
            self.random_unplayed = self.buffer[:]
        app.status(_("Random %s") % (self.random and _("on") or _("off")), 1)
        self.parent.update_title()

    def command_save_playlist(self):
        default = self.pathname or "%s/" % app.win_filelist.cwd
        app.do_input_hook = None
        app.stop_input_hook = self.stop_save_playlist
        app.start_input(_("Save playlist"), default)

    def stop_save_playlist(self):
        pathname = app.input_string
        if pathname[0] != '/':
            pathname = os.path.join(app.win_filelist.cwd, pathname)
        if not re.search("\.m3u$", pathname, re.I):
            pathname = "%s%s" % (pathname, ".m3u")
        try:
            file = open(pathname, "w")
            for entry in self.buffer:
                file.write("%s\n" % entry.pathname)
            file.close()
            self.pathname = pathname
            app.status(_("ok"), 1)
        except IOError, e:
            app.status(e, 2)

# ------------------------------------------
def get_tag(pathname):
    if re.compile("^http://").match(pathname) or not os.path.exists(pathname):
        return pathname
    tags = {}
    # FIXME: use magic instead of file extensions to identify OGGs and MP3s
    if re.compile(".*\.ogg$", re.I).match(pathname):
        try:
            vf = ogg.vorbis.VorbisFile(pathname)
            vc = vf.comment()
            tags = vc.as_dict()
        except NameError: pass
        except (IOError, UnicodeError): return os.path.basename(pathname)
    elif re.compile(".*\.mp3$", re.I).match(pathname):
        try:
            vc = ID3.ID3(pathname, as_tuple=1)
            tags = vc.as_dict()
        except NameError: pass
        except (IOError, ID3.InvalidTagError): return os.path.basename(pathname)
    else:
        return os.path.basename(pathname)

    artist = tags.get("ARTIST", [""])[0]
    title = tags.get("TITLE", [""])[0]
    tag = os.path.basename(pathname)
    try:
        if artist and title:
            tag = codecs.latin_1_encode(artist)[0] + " - " + codecs.latin_1_encode(title)[0]
        elif artist:
            tag = artist
        elif title:
            tag = title
        return codecs.latin_1_encode(tag)[0]
    except (NameError, UnicodeError): return tag

# ------------------------------------------
class Player:
    def __init__(self, commandline, files, fps=1):
        self.commandline = commandline
        self.re_files = re.compile(files, re.I)
        self.fps = fps
        self.stdout_r, self.stdout_w = os.pipe()
        self.stderr_r, self.stderr_w = os.pipe()
        self.pathname = None
        self.filename = None
        self.stopped = 0
        self.paused = 0
        self.time_setup = None
        self.offset = 0
        self.buf = None
        self.tag = None

    def is_stopped(self):
        return self.stopped

    def is_paused(self):
        return self.paused

    def setup(self, pathname, offset):
        self.argv = string.split(self.commandline)
        self.argv[0] = which(self.argv[0])
        for i in range(len(self.argv)):
            if self.argv[i] == "%s": self.argv[i] = str(pathname)
            if self.argv[i] == "%d": self.argv[i] = str(offset*self.fps)
        self.pathname = pathname
        if offset == 0:
            app.progress(0)
            self.offset = 0
            self.length = 0
            self.values = [0, 0]
        self.time_setup = time.time()
        return self.argv[0]

    def play(self):
        # todo - use listitems?
        self.filename = os.path.basename(self.pathname) or self.pathname
        app.set_default_status(_("Playing: %s") % self.filename)
        self.pid = os.fork()
        if self.pid == 0:
            os.dup2(self.stdout_w, sys.stdout.fileno())
            os.dup2(self.stderr_w, sys.stderr.fileno())
            os.setpgrp()
            try: os.execv(self.argv[0], self.argv)
            except: time.sleep(1); os._exit(1)
        self.stopped = 0
        self.paused = 0
        self.step = 0

    def pause(self, quiet=0):
        self.paused = 1
        try: os.kill(-self.pid, signal.SIGSTOP)
        except os.error: pass
        quiet or app.set_default_status(_("Paused: %s") % self.filename)

    def unpause(self, quiet=0):
        self.paused = 0
        try: os.kill(-self.pid, signal.SIGCONT)
        except os.error: pass
        quiet or app.set_default_status(_("Playing: %s") % self.filename)

    def stop(self, quiet=0):
        self.stopped = 1
        self.is_paused() and self.unpause(quiet)
        try:
            while 1:
                try: os.kill(-self.pid, signal.SIGINT)
                except os.error: pass
                os.waitpid(self.pid, os.WNOHANG)
        except Exception: pass
        quiet or app.set_default_status(_("Stopped: %s") % self.filename)

    def parse_progress(self):
        self.parse_buf()
        if self.is_stopped(): self.tag = None
        else: self.tag = app.timeout.add(1.0, self.parse_progress)

    def read_fd(self, fd):
        self.buf = os.read(fd, 512)
        self.tag or self.parse_progress()

    def read_stderr(self):
        self.read_fd(self.stderr_r)

    def read_stdout(self):
        self.read_fd(self.stdout_r)

    def poll(self):
        try: os.waitpid(self.pid, os.WNOHANG)
        except:
            # broken player? try again
            if self.time_setup and (time.time() - self.time_setup) < RETRY:
                self.play()
                return 0
            app.set_default_status("")
            app.counter([0,0])
            app.progress(0)
            return 1

    def seek(self, direction):
        d = direction * self.length * 0.002
        self.step = self.step * (self.step * d > 0) + d
        offset = min(self.length, max(0, self.offset+self.step))
        self.set_position(offset)

    def set_position(self, offset=None, length=None, values=None):
        self.offset = offset or self.offset
        self.length = length or self.length
        self.values = values or self.values
        self.show_position()

    def show_position(self):
        app.counter(self.values)
        app.progress(self.length and (float(self.offset) / self.length))

# ------------------------------------------
class FrameOffsetPlayer(Player):
    re_progress = re.compile("Time.*\s(\d+):(\d+).*\[(\d+):(\d+)")

    def parse_buf(self):
        match = self.re_progress.search(self.buf or '')
        self.buf = None
        if match and not self.step:
            m1, s1, m2, s2 = map(string.atoi, match.groups())
            head, tail = m1*60+s1, m2*60+s2
            self.set_position(head, head+tail, [head, tail])

# ------------------------------------------
class NoOffsetPlayer(Player):
    re_progress = re.compile("\s*(\d+):(\d+):(\d+)")

    def parse_buf(self):
        match = self.re_progress.search(self.buf or '')
        self.buf = None
        if match and not self.step:
            h, m, s = map(string.atoi, match.groups())
            head = tail = h*3600+m*60+s
            self.set_position(0, 0, [head, tail])

    def seek(self, *dummy):
        return 1

# ------------------------------------------
class Timeout:
    def __init__(self):
        self.next = 0
        self.dict = {}

    def add(self, timeout, func, args=()):
        tag = self.next = self.next + 1
        self.dict[tag] = (func, args, time.time() + timeout)
        return tag

    def remove(self, tag):
        del self.dict[tag]

    def check(self, now):
        for tag, (func, args, timeout) in self.dict.items():
            if now >= timeout:
                self.remove(tag)
                apply(func, args)
        return len(self.dict) and 0.2 or None

# ------------------------------------------
class FIFOControl:
    def __init__(self):
        try: self.fd = open(CONTROL_FIFO, "rb+", 0)
        except: self.fd = None
        self.commands = {"pause" : app.toggle_pause,
                         "next" : app.next_song,
                         "prev" : app.prev_song,
                         "forward" : self.forward,
                         "backward" : self.backward,
                         "play" : app.toggle_stop,
                         "stop" : app.toggle_stop,
                         "volup" : app.inc_volume,
                         "voldown" : app.dec_volume,
                         "quit" : app.quit}

    def handle_command(self):
        command = string.strip(self.fd.readline())
        if command in self.commands.keys():
            self.commands[command]()

    def forward(self):
        app.seek(1)

    def backward(self):
        app.seek(-1)

# ------------------------------------------
class Application:
    def __init__(self):
        self.keymapstack = KeymapStack()
        self.mixer_read = MIXER_IOCTL[0][1]
        self.mixer_write = MIXER_IOCTL[0][2]
        self.input_mode = 0
        self.input_prompt = ""
        self.input_string = ""
        self.do_input_hook = None
        self.stop_input_hook = None
        self.input_keymap = Keymap()
        self.input_keymap.bind(list(Window.chars), self.do_input)
        self.input_keymap.bind(curses.KEY_BACKSPACE, self.do_input, (8,))
        self.input_keymap.bind(['\a', 27], self.cancel_input, ())
        self.input_keymap.bind('\n', self.stop_input, ())

    def setup(self):
        if tty:
            self.tcattr = tty.tcgetattr(sys.stdin.fileno())
            tcattr = tty.tcgetattr(sys.stdin.fileno())
            tcattr[0] = tcattr[0] & ~(tty.IXON)
            tty.tcsetattr(sys.stdin.fileno(), tty.TCSANOW, tcattr)
        self.w = curses.initscr()
        curses.cbreak()
        curses.noecho()
        try: curses.meta(1)
        except: pass
        try: curses.curs_set(0)
        except: pass
        signal.signal(signal.SIGCHLD, signal.SIG_IGN)
        signal.signal(signal.SIGHUP, self.handler_quit)
        signal.signal(signal.SIGINT, self.handler_quit)
        signal.signal(signal.SIGTERM, self.handler_quit)
        signal.signal(signal.SIGWINCH, self.handler_resize)
        self.win_root = RootWindow(None)
        self.win_root.update()
        self.win_tab = self.win_root.win_tab
        self.win_filelist = self.win_root.win_tab.win_filelist
        self.win_playlist = self.win_root.win_tab.win_playlist
        self.status = self.win_root.win_status.status
        self.set_default_status = self.win_root.win_status.set_default_status
        self.restore_default_status = self.win_root.win_status.restore_default_status
        self.counter = self.win_root.win_counter.counter
        self.progress = self.win_root.win_progress.progress
        self.player = PLAYERS[0]
        self.timeout = Timeout()
        self.seek_tag = None
        self.start_tag = None
        self.kludge = 0
        self.win_filelist.listdir()
        self.control = FIFOControl()
        self.quit_silently = 0

    def cleanup(self):
        curses.endwin()
        XTERM and sys.stderr.write("\033]0;%s\a" % "xterm")
        tty and tty.tcsetattr(sys.stdin.fileno(), tty.TCSADRAIN, self.tcattr)

    def run(self):
        while 1:
            now = time.time()
            timeout = self.timeout.check(now)
            self.win_filelist.listdir_maybe(now)
            if not self.player.is_stopped():
                timeout = 0.5
                if self.kludge and self.player.poll():
                    pathname = self.win_playlist.next_song()
                    if pathname: self.play(pathname)
                    else: self.player.stopped = 1 # end of playlist hack
            R = [sys.stdin, self.player.stdout_r, self.player.stderr_r]
            self.control.fd and R.append(self.control.fd)
            try: r, w, e = select.select(R, [], [], timeout)
            except select.error: continue
            self.kludge = 1
            # user input
            if sys.stdin in r:
                c = self.win_root.getch()
                self.keymapstack.process(c)
            # player input
            if self.player.stderr_r in r:
                self.player.read_stderr()
            # player input
            if self.player.stdout_r in r:
                self.player.read_stdout()
            if self.control.fd in r:
                self.control.handle_command()

    def play(self, pathname, offset = 0):
        self.kludge = 0
        self.seek_tag = None
        self.start_tag = None
        if pathname is None or offset is None: return
        self.player.stop(quiet=1)
        for self.player in PLAYERS:
            if self.player.re_files.search(pathname):
                if self.player.setup(pathname, offset): break
        else:
            app.status(_("Player not found!"), 1)
            self.player.stopped = 0  # keep going
            return
        self.player.play()

    def next_song(self):
        if self.start_tag: self.timeout.remove(self.start_tag)
        args = (self.win_playlist.next_song(), 0)
        self.start_tag = self.timeout.add(0.5, self.play, args)

    def prev_song(self):
        if self.start_tag: self.timeout.remove(self.start_tag)
        args = (self.win_playlist.prev_song(), 0)
        self.start_tag = self.timeout.add(0.5, self.play, args)

    def toggle_pause(self):
        if not self.player.is_stopped():
            if self.player.is_paused(): self.player.unpause()
            else: self.player.pause()

    def toggle_stop(self):
        if not self.player.is_stopped(): self.player.stop()
        else: self.play(self.player.pathname, self.player.offset)

    def seek(self, direction):
        if self.player.is_stopped(): return
        if self.seek_tag: self.timeout.remove(self.seek_tag)
        if self.player.seek(direction): return
        args = (self.player.pathname, self.player.offset)
        self.seek_tag = self.timeout.add(0.5, self.play, args)

    def inc_volume(self):
        self.get_volume() and self.set_volume(min(100, self.volume+3))

    def dec_volume(self):
        self.get_volume() and self.set_volume(max(0, self.volume-3))

    def key_volume(self, ch):
        self.set_volume((ch & 0x0f) * 10)

    def get_volume(self):
        try:
            import fcntl
            fd = os.open(MIXER, 0)
            self.volume = ord(fcntl.ioctl(fd, self.mixer_read, "."))
            os.close(fd)
            return 1
        except Exception, e:
            app.status(e, 2)

    def set_volume(self, v):
        try:
            import fcntl
            fd = os.open(MIXER, 1)
            fcntl.ioctl(fd, self.mixer_write, "%c%c" % (v, v))
            os.close(fd)
            app.status(_("Volume %s%%") % v, 1)
        except Exception, e:
            app.status(e, 2)

    def toggle_mixer(self):
        MIXER_IOCTL.insert(0, MIXER_IOCTL.pop())
        name, self.mixer_read, self.mixer_write = MIXER_IOCTL[0]
        if self.get_volume():
            app.status(_("%s volume %s%%") % (name, self.volume), 1)

    def start_input(self, prompt="", data=""):
        self.input_mode = 1
        try: curses.curs_set(1)
        except: pass
        app.keymapstack.push(self.input_keymap)
        self.input_prompt = prompt
        self.input_string = data
        app.status("%s: %s " % (self.input_prompt, self.input_string))

    def do_input(self, *args):
        if self.do_input_hook:
            return apply(self.do_input_hook, args)
        ch = args and args[0] or None
        if ch in [8, 127]: # backspace
            self.input_string = self.input_string[:-1]
        elif ch:
            self.input_string = "%s%c" % (self.input_string, ch)
        app.status("%s: %s " % (self.input_prompt, self.input_string))

    def stop_input(self, *args):
        self.input_mode = 0
        try: curses.curs_set(0)
        except: pass
        app.keymapstack.pop()
        if not self.input_string:
            app.status(_("cancel"), 1)
            return
        if self.stop_input_hook:
            return apply(self.stop_input_hook, args)

    def cancel_input(self):
        self.input_string = ""
        self.stop_input()

    def quit(self):
        if not self.player.is_stopped(): self.player.stop(quiet=1)
        sys.exit(0)

    def handler_resize(self, sig, frame):
        # curses trickery
        while 1:
            try: curses.endwin(); break
            except: time.sleep(1)
        self.w.refresh()
        self.win_root.resize()
        self.win_root.update()

    def handler_quit(self, sig, frame):
        self.quit()

# ------------------------------------------
def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "qrRv")
    except:
        usage = _("Usage: %s [-qrRv] [ file | dir | playlist ] ...\n")
        sys.stderr.write(usage % sys.argv[0])
        sys.exit(1)

    global app
    app = Application()

    playlist = []
    if not sys.stdin.isatty():
        playlist = map(string.strip, sys.stdin.readlines())
        os.close(0)
        os.open("/dev/tty", 0)
    try:
        app.setup()
        for opt, optarg in opts:
            if opt == "-q": app.quit_silently = 1
            if opt == "-r": app.win_playlist.command_toggle_repeat()
            if opt == "-R": app.win_playlist.command_toggle_random()
            if opt == "-v": app.toggle_mixer()
        if args or playlist:
            for item in args or playlist:
                app.win_playlist.add(item)
            app.win_tab.change_window()
        app.run()
    except SystemExit:
        app.cleanup()
    except Exception:
        app.cleanup()
        import traceback
        traceback.print_exc()

# ------------------------------------------

PLAYERS = [
    FrameOffsetPlayer("ogg123 -q -v -k %d %s", "\.ogg$"),
    FrameOffsetPlayer("mpg123 -q -v -k %d %s", "\.mp[123]$", 38.28),
    FrameOffsetPlayer("splay -f -k %d %s", "(^http://|\.mp[123]$)", 38.28),
    FrameOffsetPlayer("mpg321 -q -v -k %d %s", "(^http://|\.mp[123]$)", 38.28),
    NoOffsetPlayer("madplay -q -v --no-tty-control %s", "\.mp[123]$"),
    NoOffsetPlayer("mikmod -q -p0 %s", "\.(mod|xm|fm|s3m|med|col|669|it|mtm)$")
    ]

def VALID_SONG(name):
    for player in PLAYERS:
        if player.re_files.search(name):
            return 1

RE_PLAYLIST = re.compile("\.(m3u|pls)$", re.I)

def VALID_PLAYLIST(name):
    if RE_PLAYLIST.search(name):
        return 1

# ------------------------------------------
if __name__ == "__main__": main()
